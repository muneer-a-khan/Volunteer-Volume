# AWS Setup Guide for Volunteer Volume

This guide provides step-by-step instructions for setting up all required AWS services for the Volunteer Volume application. Follow these steps carefully to ensure a proper configuration.

## Prerequisites

1. An AWS account with administrative access
2. AWS CLI installed and configured on your local machine
3. Node.js (v16+) and npm installed

## 1. Set Up AWS Cognito User Pool

Cognito will handle authentication for our application.

### Create a User Pool:

1. Open the AWS Management Console and navigate to the Cognito service
2. Click "Create user pool"
3. Choose "Cognito user pool" as the authentication provider
4. Configure sign-in experience:
   - Select "Email" as the cognito user pool sign-in options
   - Select "Allow users to sign in with a verified email address"
   - Click "Next"
5. Configure security requirements:
   - Password policy: Select "Cognito defaults"
   - Multi-factor authentication: Select "No MFA"
   - User account recovery: Check "Enable self-service account recovery"
   - Select "Email only" for delivery method for user account recovery messages
   - Click "Next"
6. Configure sign-up experience:
   - Self-service sign-up: Check "Enable self-registration"
   - Required attributes: Select "name", "email"
   - Custom attributes: Add "phone" as a custom attribute (make it mutable)
   - Click "Next"
7. Configure message delivery:
   - Email provider: Select "Send email with Cognito"
   - From email address: Use your email or set up SES
   - Click "Next"
8. Integrate your app:
   - User pool name: `volunteer-volume-user-pool`
   - Hosted authentication pages: Uncheck "Use the Cognito Hosted UI"
   - Initial app client: 
     - App type: "Public client"
     - App client name: `volunteer-volume-client`
     - Authentication flows: Check all options
     - Click "Next"
9. Review and create:
   - Review your choices and click "Create user pool"

### Note Important Information:

After creation, note down the following information:
- User Pool ID
- App Client ID

## 2. Set Up AWS RDS Database

Create a MySQL database to store application data.

### Create a Database:

1. Open the AWS Management Console and navigate to the RDS service
2. Click "Create database"
3. Choose a database creation method: Select "Standard create"
4. Engine options: Select "MySQL"
5. Version: Choose MySQL 8.0 or later
6. Templates: Choose "Free tier" for development or "Production" for a production environment
7. Settings:
   - DB instance identifier: `volunteer-volume-db`
   - Master username: Create a username (e.g., `vadm_admin`)
   - Master password: Create a strong password
8. Instance configuration:
   - For development: Choose "db.t2.micro" or "db.t3.micro"
   - For production: Choose an appropriate instance size
9. Storage:
   - Allocated storage: 20 GB (increase for production)
   - Storage type: General Purpose SSD (gp2)
   - Enable storage autoscaling: Yes (for production)
10. Connectivity:
    - VPC: Choose your VPC
    - Public access: Yes for development (No for production with proper VPC setup)
    - VPC security group: Create new or select existing
    - Availability Zone: No preference
11. Database authentication:
    - Choose "Password authentication"
12. Additional configuration:
    - Initial database name: `volunteer_volume`
    - Backup retention period: 7 days
    - Monitoring: Enable for production
13. Click "Create database"

### Note Database Connection Information:

After creation, note down:
- Endpoint (hostname)
- Port (default is 3306)
- Database name
- Username
- Password

## 3. Set Up AWS S3 Bucket

Create an S3 bucket to store volunteer files and documents.

### Create a Bucket:

1. Open the AWS Management Console and navigate to the S3 service
2. Click "Create bucket"
3. General configuration:
   - Bucket name: `vadm-volunteer-files`
   - AWS Region: Choose the same region as your other services
4. Block Public Access settings:
   - Uncheck "Block all public access" for development (For production, keep it checked and use proper access controls)
5. Bucket versioning: Enable
6. Default encryption: Enable with Amazon S3-managed keys (SSE-S3)
7. Click "Create bucket"

### Configure CORS Policy:

1. Select your newly created bucket
2. Go to the "Permissions" tab
3. Scroll down to "Cross-origin resource sharing (CORS)"
4. Click "Edit" and paste the following configuration:

```json
[
  {
    "AllowedHeaders": ["*"],
    "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
    "AllowedOrigins": ["*"],
    "ExposeHeaders": ["ETag"]
  }
]
```

For production, replace `"*"` in AllowedOrigins with your domain.

## 4. Set Up AWS SNS for Notifications

Create an SNS topic for sending notifications to volunteers.

### Create an SNS Topic:

1. Open the AWS Management Console and navigate to the SNS service
2. Click "Topics" in the left sidebar, then "Create topic"
3. Choose "Standard" for type
4. Name: `volunteer-volume-notifications`
5. Display name: `VADM Volunteers` (this will appear in SMS messages)
6. Click "Create topic"

### Note Topic Information:

After creation, note down:
- Topic ARN

### Set Up SMS Messaging (Optional):

If you plan to send SMS notifications:

1. In the SNS console, click "Text messaging (SMS)" in the left sidebar
2. Click "Edit" under "Text messaging preferences"
3. Choose your preferences for delivery:
   - Default message type: "Transactional" (for important notifications)
   - Default sender ID: "VADM" (optional)
4. Click "Save changes"

## 5. Set Up AWS IAM User for Application

Create an IAM user with appropriate permissions for your application to access AWS services.

### Create an IAM User:

1. Open the AWS Management Console and navigate to the IAM service
2. Click "Users" in the left sidebar, then "Add users"
3. User details:
   - User name: `volunteer-volume-app`
   - Select "Access key - Programmatic access"
4. Permissions:
   - Click "Attach existing policies directly"
   - Search for and select the following policies:
     - `AmazonCognitoPowerUser`
     - `AmazonSNSFullAccess`
     - `AmazonS3FullAccess`
   - For more restricted permissions in production, create custom policies
5. Tags: Add optional tags (e.g., `Project: VolunteerVolume`)
6. Review and click "Create user"

### Note Access Keys:

After creation, note down:
- Access key ID
- Secret access key

**IMPORTANT:** This is the only time you'll see the secret access key. Store it securely.

## 6. Set Up AWS Amplify for Hosting

### Create an Amplify App:

1. Open the AWS Management Console and navigate to the Amplify service
2. Click "New app" then "Host web app"
3. Choose your source code provider (GitHub, Bitbucket, GitLab, or AWS CodeCommit)
4. Connect to your repository and select the branch to deploy
5. Configure build settings:
   - Use the default build settings or customize as needed
   - Add the following environment variables:
     - `NEXT_PUBLIC_AWS_REGION`: Your AWS region
     - `NEXT_PUBLIC_AWS_COGNITO_REGION`: Your AWS region
     - `NEXT_PUBLIC_AWS_COGNITO_USER_POOL_ID`: Your Cognito User Pool ID
     - `NEXT_PUBLIC_AWS_COGNITO_USER_POOL_WEB_CLIENT_ID`: Your Cognito App Client ID
     - `NEXT_PUBLIC_AWS_S3_BUCKET`: `vadm-volunteer-files`
     - `NEXT_PUBLIC_AWS_SNS_TOPIC_ARN`: Your SNS Topic ARN
     - `DATABASE_URL`: MySQL connection string in the format `mysql://username:password@hostname:3306/volunteer_volume`
     - `GOOGLE_CALENDAR_API_KEY`: Your Google Calendar API Key
     - Other environment variables as needed
6. Select "I understand that Amplify Console will deploy backend resources..." and click "Create app"

### Configure Amplify Build Settings:

Create an `amplify.yml` file in your project root:

```yaml
version: 1
frontend:
  phases:
    preBuild:
      commands:
        - npm ci
        - npm run prisma:generate
    build:
      commands:
        - npm run build
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
```

### Connect Custom Domain (Optional):

1. In the Amplify console, go to your app
2. Click "Domain management" in the left sidebar
3. Click "Add domain"
4. Enter your domain name and follow the steps to verify and configure DNS

## 7. Initialize the Database

### Run Prisma Migrations:

1. Update the `DATABASE_URL` in your `.env.local` file with your RDS connection string
2. Run the following commands locally:

```bash
npm run prisma:generate
npm run prisma:push
```

This will create the database schema based on your Prisma models.

## 8. Set Up Google Calendar Integration

### Create a Google Cloud Project:

1. Go to the [Google Cloud Console](https://console.cloud.google.com/)
2. Create a new project
3. Enable the Google Calendar API
4. Create API credentials:
   - Create an API key
   - Restrict the API key to only the Calendar API
   - Set application restrictions (HTTP referrers) to your domain(s)
5. Note down the API key

### Create a Calendar:

1. Go to [Google Calendar](https://calendar.google.com/)
2. Create a new calendar for volunteer shifts
3. In calendar settings, note down the Calendar ID

## 9. Update Environment Variables

Update your `.env.local` file with all the information collected from previous steps:

```
# AWS Configuration
NEXT_PUBLIC_AWS_REGION=your-aws-region
NEXT_PUBLIC_AWS_COGNITO_REGION=your-aws-region
NEXT_PUBLIC_AWS_COGNITO_USER_POOL_ID=your-user-pool-id
NEXT_PUBLIC_AWS_COGNITO_USER_POOL_WEB_CLIENT_ID=your-client-id
AWS_ACCESS_KEY_ID=your-access-key-id
AWS_SECRET_ACCESS_KEY=your-secret-access-key
NEXT_PUBLIC_AWS_S3_BUCKET=vadm-volunteer-files
NEXT_PUBLIC_AWS_SNS_TOPIC_ARN=your-sns-topic-arn

# Database
DATABASE_URL=mysql://username:password@hostname:3306/volunteer_volume

# Google Calendar
GOOGLE_CALENDAR_API_KEY=your-google-api-key
GOOGLE_CALENDAR_ID=your-calendar-id

# App Settings
NEXTAUTH_SECRET=random-string-for-jwt-encryption
NEXTAUTH_URL=http://localhost:3000
NODE_ENV=development
```

## 10. Deploy the Application

### Initial Deployment:

1. Commit and push your changes to your repository
2. Amplify will automatically detect the changes and start the build process
3. Monitor the build logs for any errors

### Manual Deployment:

If you need to manually deploy:

1. In the Amplify console, go to your app
2. Click "Redeploy this version" or select a branch to deploy

## Security Considerations

For a production environment, consider the following additional security measures:

1. **RDS Database**:
   - Set Public access to No
   - Use a VPC with private subnets
   - Configure security groups to only allow access from your application servers

2. **S3 Bucket**:
   - Enable Block Public Access
   - Use bucket policies or IAM roles for limited access
   - Consider server-side encryption for sensitive data

3. **IAM Permissions**:
   - Create custom policies with least privilege principle
   - Regularly rotate access keys

4. **Cognito**:
   - Enable Advanced Security features
   - Consider enabling MFA
   - Use custom verification messages

5. **Amplify**:
   - Set up branch-based deployments and environments
   - Use access controls for Amplify console

## Troubleshooting

### Common Issues and Solutions:

1. **CORS Errors**:
   - Verify S3 CORS configuration
   - Check that your API endpoints have proper CORS headers

2. **Authentication Issues**:
   - Verify Cognito User Pool and App Client settings
   - Check that your app is using the correct User Pool ID and Client ID

3. **Database Connection Issues**:
   - Verify security group allows access from your application
   - Check connection string format
   - Ensure database user has appropriate permissions

4. **Deployment Failures**:
   - Check Amplify build logs for errors
   - Verify environment variables are set correctly
   - Check that the `amplify.yml` file is properly configured

For more assistance, refer to specific AWS service documentation or contact AWS Support.